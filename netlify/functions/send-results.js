const https = require('https');

exports.handler = async (event, context) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const formData = JSON.parse(event.body);
    
    // –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ë–ï–ó–û–ü–ê–°–ù–û!)
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!BOT_TOKEN) {
      throw new Error('Telegram bot token not configured');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    const chatIds = await getAllChats(BOT_TOKEN);
    
    if (chatIds.length === 0) {
      throw new Error('No subscribers found');
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = formatMessage(formData);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    const messageParts = splitMessage(message);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
    let successCount = 0;
    
    for (const chatId of chatIds) {
      try {
        for (let i = 0; i < messageParts.length; i++) {
          if (i > 0) await sleep(1000);
          await sendMessage(BOT_TOKEN, chatId, messageParts[i]);
        }
        successCount++;
      } catch (error) {
        console.error(`Error sending to ${chatId}:`, error.message);
      }
      
      await sleep(100); // –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–∏–º–∏—Ç–æ–≤
    }

    return {
      statusCode: 200,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        success: true, 
        sent_to: successCount, 
        total_chats: chatIds.length 
      })
    };

  } catch (error) {
    console.error('Function error:', error);
    
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        error: error.message,
        timestamp: new Date().toISOString()
      })
    };
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã
async function getAllChats(botToken) {
  const updates = await makeRequest('GET', `https://api.telegram.org/bot${botToken}/getUpdates?limit=100`);
  
  if (!updates.ok || !updates.result) {
    return [];
  }

  const chatIds = new Set();
  
  updates.result.forEach(update => {
    if (update.message && update.message.from && !update.message.from.is_bot) {
      chatIds.add(update.message.chat.id);
    }
  });

  return Array.from(chatIds);
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
async function sendMessage(botToken, chatId, message) {
  const payload = {
    chat_id: chatId,
    text: message,
    parse_mode: 'HTML',
    disable_web_page_preview: true
  };

  const result = await makeRequest('POST', `https://api.telegram.org/bot${botToken}/sendMessage`, payload);
  
  if (!result.ok) {
    throw new Error(`Telegram API error: ${result.description}`);
  }
  
  return result;
}

// HTTP –∑–∞–ø—Ä–æ—Å
function makeRequest(method, url, data = null) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    
    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port || 443,
      path: urlObj.pathname + urlObj.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve(parsed);
        } catch (error) {
          reject(new Error('Invalid JSON response'));
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data && method === 'POST') {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function formatMessage(formData) {
  let message = `<b>üìã –ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - FB ADS TEST</b>\n\n`;
  
  message += `<b>üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç:</b> <code>${formData.fio}</code>\n`;
  message += `<b>üì± Telegram:</b> ${formData.telegram}\n`;
  message += `<b>üïê –î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b> ${formData.submitted_at_local}\n\n`;

  message += `<b>‚è± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:</b>\n`;
  message += `‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${formData.summary.total_view_time_formatted}\n`;
  message += `‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞: ${formData.summary.total_typing_time_formatted}\n`;
  message += `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${formData.summary.items_count}\n\n`;

  message += `<b>üìù –û–¢–í–ï–¢–´ –ü–û –¢–û–í–ê–†–ê–ú:</b>\n${'‚ïê'.repeat(30)}\n`;

  for (const [code, item] of Object.entries(formData.items)) {
    message += `\n<b>${item.code} - ${item.name}</b>\n`;
    message += `‚è± –í—Ä–µ–º—è: –ø—Ä–æ—Å–º–æ—Ç—Ä ${item.time_view_formatted} | –Ω–∞–±–æ—Ä ${item.time_typing_formatted}\n`;
    
    message += `\n<b>üì¢ –†–ï–ö–õ–ê–ú–ù–´–ô –¢–ï–ö–°–¢:</b>\n<code>${item.ads_copy}</code>\n`;
    message += `\n<b>üîç –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>\n<code>${item.analysis}</code>\n`;
    message += `\n<b>üîó –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n‚Ä¢ <a href="${item.landing}">–õ–µ–Ω–¥–∏–Ω–≥</a> | <a href="${item.video}">–í–∏–¥–µ–æ</a>\n`;
    message += `\n${'‚îÄ'.repeat(25)}\n`;
  }

  message += `\n<b>üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n`;
  message += `‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${formData.page_url}\n`;
  message += `‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${formData.user_agent.includes('Mobile') ? 'üì± Mobile' : 'üíª Desktop'}\n`;
  message += `‚Ä¢ –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: ${formData.version}\n`;

  return message;
}

// –†–∞–∑–±–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
function splitMessage(message, maxLength = 4000) {
  if (message.length <= maxLength) {
    return [message];
  }

  const parts = [];
  const headerEnd = message.indexOf('üìù –û–¢–í–ï–¢–´ –ü–û –¢–û–í–ê–†–ê–ú:');
  const header = message.substring(0, headerEnd);
  const itemsSection = message.substring(headerEnd);
  const items = itemsSection.split('‚îÄ'.repeat(25));
  
  parts.push(header + 'üìù –û–¢–í–ï–¢–´ –ü–û –¢–û–í–ê–†–ê–ú:\n' + '‚ïê'.repeat(30));
  
  let currentPart = '';
  for (let i = 0; i < items.length; i++) {
    if (currentPart.length + items[i].length > maxLength) {
      if (currentPart) parts.push(currentPart);
      currentPart = items[i];
    } else {
      currentPart += items[i];
    }
    if (i < items.length - 1) currentPart += '‚îÄ'.repeat(25);
  }
  
  if (currentPart) parts.push(currentPart);
  return parts;
}

// –ó–∞–¥–µ—Ä–∂–∫–∞
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
